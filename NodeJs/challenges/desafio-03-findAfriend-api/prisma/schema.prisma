// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum Age {
  FILHOTE
  ADOLESCENTE
  ADULTO
}

enum Porte {
  PEQUENINO
  MEDIO
  GRANDE
}

enum Energy {
  BAIXA
  MEDIA
  ALTO
}

enum Independence {
  BAIXA
  MEDIA
  ALTA
}

enum Environment {
  PEQUENO
  GRANDE
  AMPLO
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role     @default(MEMBER)
  created_at    DateTime @default(now())

  @@map("users")
}

model Pet {
  id                 String       @id @default(uuid())
  name               String
  description        String
  age                Age
  porte              Porte
  energy_level       Energy
  independence_level Independence
  environment        Environment

  available  DateTime?
  created_at DateTime  @default(now())

  org          Org            @relation(fields: [org_id], references: [id], onDelete: Cascade)
  org_id       String
  pictures     Picture[]
  requirements Requirements[]

  @@map("pets")
}

model Org {
  id            String    @id @default(uuid())
  title         String
  description   String?
  email         String
  password_hash String
  role          Role      @default(MEMBER)
  pets          Pet[]
  addresses     Address[]

  @@map("orgs")
}

model Address {
  id     String @unique() @default(uuid())
  phone  String
  street String
  city   String

  org    Org    @relation(fields: [org_id], references: [id], onDelete: Cascade)
  org_id String
}

model Picture {
  id            String @unique() @default(uuid())
  image_address String

  pets   Pet    @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  pet_id String

  @@map("pictures")
}

model Requirements {
  id          String @unique() @default(uuid())
  description String

  pets   Pet    @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  pet_id String
}
