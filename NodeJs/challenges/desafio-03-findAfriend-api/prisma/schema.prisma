// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Member
}

enum Age {
  Filhote
  Adolescente
  Adulto
}

enum Size {
  Pequenino
  Medio
  Grande
}

enum Energy_level {
  Baixa
  Medio
  Alto
}

enum Independence_level {
  Baixo
  Medio
  Alto
}

enum Ambience {
  Pequeno
  Amplo
  Grande
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role     @default(Member)
  created_at    DateTime @default(now())

  @@map("users")
}

model Org {
  id            String   @id @default(uuid())
  name          String
  email         String
  password_hash String
  role          Role     @default(Member)
  created_at    DateTime @default(now())

  Address Address[]
  Pet     Pet[]

  @@map("orgs")
}

model Pet {
  id                 String             @id @default(uuid())
  name               String
  description        String
  age                Age
  size               Size
  energy_level       Energy_level
  independence_level Independence_level
  ambience           Ambience
  available          DateTime?          @default(now())
  created_at         DateTime           @default(now())

  org         Org           @relation(fields: [org_id], references: [id], onDelete: Cascade)
  org_id      String
  Requirement Requirement[]
  Picture     Picture[]

  @@map("pets")
}

model Address {
  id     String @id @default(uuid())
  street String
  phone  String
  city   String

  org    Org    @relation(fields: [org_id], references: [id], onDelete: Cascade)
  org_id String

  @@map("addresses")
}

model Requirement {
  id          String @id @default(uuid())
  description String

  pet    Pet    @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  pet_id String

  @@map("requirements")
}

model Picture {
  id            String @id @default(uuid())
  image_address String

  pet    Pet    @relation(fields: [pet_id], references: [id], onDelete: Cascade)
  pet_id String

  @@map("pictures")
}
